Elias Zare:
import java.util.*;

class BankingApplication {

    private static List<User> users = new ArrayList<>();

    public static void main(String[] args) {

        SetupSampleData();

        Scanner scanner = new Scanner(System.in);

        System.out.println("\n\n\n\nWelcome to the OKash!");
        System.out.println("*****************************");
        System.out.print("Enter your username: ");
        String username = scanner.nextLine();
        System.out.print("Enter your user ID: ");
        String userId = scanner.nextLine();

        User currentUser = authenticateUser(username, userId);
        if (currentUser == null) {
            System.out.println("Authentication failed. Exiting program.");
            return;
        }

        System.out.println("Login successful. Welcome, " + currentUser.GetUsername() + "!");
        System.out.println("*****************************");

        mainMenu(currentUser);
    }

    private static User authenticateUser(String username, String userId) {
        for (User user : users) {
            if (user.GetUsername().equals(username) && user.GetPassword().equals(userId)) {
                return user;
            }
        }
        return null;
    }

    private static void mainMenu(User user) {
        Scanner scanner = new Scanner(System.in);
        while (true) {
            System.out.println("\nMain Menu:");
            System.out.println("1. View Balances");
            System.out.println("2. Deposit");
            System.out.println("3. Withdraw");
            System.out.println("4. Transfer");
            System.out.println("5. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    ViewBalances(user);
                    break;
                case 2:
                    Deposit(user);
                    break;
                case 3:
                    Withdraw(user);
                    break;
                case 4:
                    Transfer(user);
                    break;
                case 5:
                    System.out.println("Thank you for using the OKash!");
                    return;
                default:
                    System.out.println("Invalid option!");
            }
        }
    }

    private static void ViewBalances(User user) {
        System.out.println("\nAccount Balances:");
        for (Account account : user.GetAccounts()) {
            System.out.println("Account ID: " + account.GetAccountId() + ", Owner: " + account.GetOwnerName() +
                    ", Balance: $" + account.GetBalance());
        }
    }

    private static void Deposit(User user) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("\nSelect an account to deposit into:");
        DisplayAccounts(user);
        System.out.print("Enter account ID: ");
        String accountId = scanner.nextLine();
        Account selectedAccount = FindAccountById(user, accountId);

        if (selectedAccount == null) {
            System.out.println("Invalid account ID.");
            return;
        }

        System.out.print("Enter deposit amount: ");
        double amount = scanner.nextDouble();
        selectedAccount.Deposit(amount);
        System.out.println("Deposit successful. New balance: $" + selectedAccount.GetBalance());
    }

    private static void Withdraw(User user) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("\nSelect an account to withdraw from:");
        DisplayAccounts(user);
        System.out.print("Enter account ID: ");
        String accountId = scanner.nextLine();
        Account selectedAccount = FindAccountById(user, accountId);

        if (selectedAccount == null) {
            System.out.println("Invalid account ID.");
            return;
        }

        System.out.print("Enter withdrawal amount: ");
        double amount = scanner.nextDouble();
        if (selectedAccount.Withdraw(amount)) {
            System.out.println("Withdrawal successful. New balance: $" + selectedAccount.GetBalance());
        } else {
            System.out.println("Insufficient balance.");
        }
    }

    private static void Transfer(User user) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("\nSelect the source account:");
        DisplayAccounts(user);
        System.out.print("Enter source account ID: ");
        String sourceAccountId = scanner.nextLine();
        Account sourceAccount = FindAccountById(user, sourceAccountId);

        if (sourceAccount == null) {
            System.out.println("Invalid source account ID.");
            return;
        }

        System.out.print("Enter target account ID: ");
        String targetAccountId = scanner.nextLine();
        Account targetAccount = FindAccountById(user, targetAccountId);
        
        if (targetAccount == null) {
            System.out.println("Invalid target account ID.");
            return;
        }

        System.out.print("Enter transfer amount: ");
        double amount = scanner.nextDouble();
        if (sourceAccount.Transfer(targetAccount, amount)) {
            System.out.println("Transfer successful.");
            System.out.println("Transaction Receipt:");
            System.out.println("From Account: " + sourceAccount.GetAccountId() + ", Balance: $" + sourceAccount.GetBalance());
            System.out.println("To Account: " + targetAccount.GetAccountId() + ", Balance: $" + targetAccount.GetBalance());
        } else {
            System.out.println("Transfer failed. Insufficient balance.");
        }
    }

    private static Account FindAccountById(User user, String accountId) {
        for (Account account : user.GetAccounts()) {
            if (account.GetAccountId().equals(accountId)) {
                return account;
            }
        }
        return null;
    }

    private static void DisplayAccounts(User user) {
        for (Account account : user.GetAccounts()) {
            System.out.println("Account ID: " + account.GetAccountId() + ", Owner: " + account.GetOwnerName());
        }
    }

    private static void SetupSampleData() {
        User user1 = new User("Ali", "Ali1385");
        user1.AddAccount(new Account("6038", "Ali", 5000));
        user1.AddAccount(new Account("6037", "Ali", 1000));

        User user2 = new User("Reza", "Reza1385");
        user2.AddAccount(new Account("5029", "Reza", 2000));

        users.add(user1);
        users.add(user2);
    }
}
